plugins {
  id("java")
  id("jacoco")
  id("checkstyle")
  id("application")
  id("com.github.spotbugs") version "6.2.0"
  id("org.springframework.boot") version "3.5.3"
  id("io.spring.dependency-management") version "1.1.7"
}

group = "tech.maze"

ext {
  javaxVersion                = "1.3.2"
  junitVersion                = "5.12.0"
  awsSQSVersion               = "2.30.28"
  lombokVersion               = "1.18.38"
  wiremockVersion             = "3.0.1"
  mapStructVersion            = "1.6.3"
  snakeyamlVersion            = "2.4"
  postgresqlVersion           = "42.7.7"
  springBootVersion           = "3.4.5"
  mazeCommonsVersion          = "0.0.9"
  mazeDtosHelloWorldVersion   = "0.0.3"
  protocPluginVersion         = "1.70.0"
  protobufJavaVersion         = "4.31.1"
  resilience4jVersion         = "2.3.0"
  grpcSpringBootVersion       = "3.1.0.RELEASE"
  springCloudVersion          = "2024.0.0"
  springCloudAwsVersion       = "3.3.0"
  testContainersVersion       = "1.21.2"
  testContainersRedisVersion  = "1.6.4"
  mapStructSPIProtobufVersion = "1.1.0"
  lombokMapstructBindingVersion = "0.2.0"
  grpcVersion                 = "1.73.0"
  flywayVersion               = "11.9.1"
  mapStructSpringVersion  = "1.1.3"
}

repositories {
  mavenLocal()
  mavenCentral()
  gradlePluginPortal()

  maven {
    url "https://repo.spring.io/milestone"
  }

  maven {
    url "https://repo.spring.io/release"
  }

  maven {
    url "https://maven.pkg.github.com/maze-technology/tech.maze.commons"

    // INFO: Pulling from GitHub Packages (even public ones) requires a personal access token
    // https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/managing-your-personal-access-tokens#creating-a-fine-grained-personal-access-token
    credentials {
      username = System.getenv("GITHUB_USERNAME")
      password = System.getenv("GITHUB_TOKEN")
    }
  }

  maven {
    url "https://maven.pkg.github.com/maze-technology/tech.maze.dtos.helloworld"

    // INFO: Pulling from GitHub Packages (even public ones) requires a personal access token
    // https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/managing-your-personal-access-tokens#creating-a-fine-grained-personal-access-token
    credentials {
      username = System.getenv("GITHUB_USERNAME")
      password = System.getenv("GITHUB_TOKEN")
    }
  }
}

dependencyManagement {
  imports {
    mavenBom "org.junit:junit-bom:$junitVersion"
    mavenBom "org.testcontainers:testcontainers-bom:$testContainersVersion"
    mavenBom "org.springframework.boot:spring-boot-dependencies:$springBootVersion"

    // TODO: Move
    // mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"

    // mavenBom "io.awspring.cloud:spring-cloud-aws-dependencies:$springCloudAwsVersion"
  }
}

dependencies {
  // Maze Commons
  implementation "tech.maze:commons:$mazeCommonsVersion"

  // Maze Hello World DTOs
  implementation "tech.maze:dtos.helloworld:$mazeDtosHelloWorldVersion"

  // Spring Boot
  implementation "org.springframework.boot:spring-boot-starter-validation"
  implementation "org.springframework:spring-messaging"
  implementation "org.yaml:snakeyaml:$snakeyamlVersion"

  // Spring Boot GRPC Server
  implementation "net.devh:grpc-server-spring-boot-starter:$grpcSpringBootVersion"

  // GRPC
  implementation "io.grpc:grpc-core:$grpcVersion"
  implementation "io.grpc:grpc-netty:$grpcVersion"
  implementation "io.grpc:grpc-protobuf:$grpcVersion"
  implementation "io.grpc:grpc-stub:$grpcVersion"

  // Protobuf Java Util
  implementation "com.google.protobuf:protobuf-java-util:$protobufJavaVersion"

  // Database
  implementation "org.springframework.boot:spring-boot-starter-data-jpa"

  // Flyway
  implementation "org.flywaydb:flyway-core:$flywayVersion"
  implementation "org.flywaydb:flyway-database-postgresql:$flywayVersion"

  // PostgreSQL
  implementation "org.postgresql:postgresql:$postgresqlVersion"

  // TODO: MOVE
  // Spring Cloud Stream
  // implementation "org.springframework.cloud:spring-cloud-stream"

  // // Spring Cloud AWS Messaging
  // // implementation "io.awspring.cloud:spring-cloud-aws-messaging"

  // // Redis
  // implementation "org.springframework.boot:spring-boot-starter-data-redis"

  // // Guava
  // implementation "com.google.guava:guava:33.4.8-jre"

  // MapStruct
  implementation "org.mapstruct:mapstruct:$mapStructVersion"
  annotationProcessor "org.mapstruct:mapstruct-processor:$mapStructVersion"
  // MapStruct SPI Protobuf mapping
  annotationProcessor "de.firehead:mapstruct-spi-protobuf:$mapStructSPIProtobufVersion"
  // Lombok Mapstruct mapping (Builder support)
  annotationProcessor "org.projectlombok:lombok-mapstruct-binding:$lombokMapstructBindingVersion"
  implementation "org.mapstruct.extensions.spring:mapstruct-spring-annotations:$mapStructSpringVersion"
  annotationProcessor "org.mapstruct.extensions.spring:mapstruct-spring-extensions:$mapStructSpringVersion"

  // Lombok
  compileOnly "org.projectlombok:lombok:$lombokVersion"
  annotationProcessor "org.projectlombok:lombok:$lombokVersion"
  testCompileOnly "org.projectlombok:lombok:$lombokVersion"
	testAnnotationProcessor "org.projectlombok:lombok:$lombokVersion"

  annotationProcessor "org.springframework.boot:spring-boot-configuration-processor"
  implementation "javax.annotation:javax.annotation-api:$javaxVersion"

  // JUnit Test Framework
  testImplementation "org.springframework.boot:spring-boot-starter-test"
  testImplementation "org.testcontainers:junit-jupiter"
  testImplementation "org.testcontainers:testcontainers"
  testImplementation "org.awaitility:awaitility"
  testImplementation "org.testcontainers:localstack"
  testImplementation "org.testcontainers:postgresql"
  testImplementation "com.redis.testcontainers:testcontainers-redis:$testContainersRedisVersion"
  testImplementation "org.junit.jupiter:junit-jupiter"
  testImplementation "org.junit.jupiter:junit-jupiter-api"
  testImplementation "org.junit.jupiter:junit-jupiter-engine"
  testImplementation "org.mapstruct.extensions.spring:mapstruct-spring-test-extensions:$mapStructSpringVersion"
  testAnnotationProcessor "org.mapstruct.extensions.spring:mapstruct-spring-extensions:$mapStructSpringVersion"
  testImplementation "org.springframework.boot:spring-boot-testcontainers"

  // Mock Frameworks
  testImplementation "com.github.tomakehurst:wiremock-jre8-standalone:$wiremockVersion"
}

checkstyle {
  toolVersion = "10.21.3"
  maxWarnings = 0
  ignoreFailures = false
  sourceSets = [project.sourceSets.main]
}

import com.github.spotbugs.snom.Confidence
import com.github.spotbugs.snom.Effort

spotbugs {
  projectName = name
  maxHeapSize = "512m"
  showProgress = false
  ignoreFailures = true
  showStackTraces = true
  effort = Effort.valueOf("DEFAULT")
  reportLevel = Confidence.valueOf("DEFAULT")
}

spotbugsMain {
  reports {
    html {
      required = true
      outputLocation = file("$buildDir/reports/spotbugs/main/spotbugs.html")
      stylesheet = "fancy-hist.xsl"
    }
  }
}

test {
  useJUnitPlatform()
  finalizedBy(jacocoTestReport)

  testLogging {
    events "passed", "skipped", "failed"
  }

  reports {
    junitXml.required = true
  }
}

jacocoTestReport {
  sourceSets(sourceSets.main)
  executionData fileTree(project.rootDir.absolutePath).include("**/build/jacoco/*.exec")

  reports {
    xml.required = true
    csv.required = false
  }

  dependsOn test
  mustRunAfter javadoc
}

tasks.named("jacocoTestReport") {
  dependsOn "bootStartScripts", "compileIntegrationTestJava", "integrationTest", "processIntegrationTestResources", "startScripts"
}

jacocoTestCoverageVerification {
  violationRules {
    rule {
      limit {
        minimum = 0.8
      }
    }
  }
}

configurations {
  integrationTestApi.extendsFrom testApi
  integrationTestCompile.extendsFrom testCompile
  integrationTestRuntime.extendsFrom testRuntime
  integrationTestCompileOnly.extendsFrom testCompileOnly
  integrationTestRuntimeOnly.extendsFrom testRuntimeOnly
  integrationTestImplementation.extendsFrom testImplementation
}


testing {
  suites {
    integrationTest(JvmTestSuite) {
      dependencies {
        implementation project()
      }
    }
  }
}

tasks.withType(Javadoc).configureEach {
  options.addStringOption('Xdoclint:none', '-quiet')
}

tasks.named("checkstyleMain", Checkstyle) {
  showViolations = true

  reports {
    xml.required = true
    html.required = true
  }
}

tasks.named("check") {
  dependsOn testing.suites.integrationTest
  dependsOn javadoc
}

// Add this to ensure checkstyle runs before check
tasks.named("check").configure {
  dependsOn checkstyleMain
}

bootBuildImage {
  builder = "paketobuildpacks/builder-jammy-base:0.4.425"
  // https://github.com/paketo-buildpacks/builder-jammy-base/

  environment = [
    'BP_ENABLE_RUNTIME_CERT_BINDING': "false",
    'BP_NATIVE_IMAGE'               : "false",
  ]

  docker {
    publishRegistry {
      username = System.getenv("DOCKER_USERNAME")
      password = System.getenv("DOCKER_PASSWORD")
    }
  }
}

application {
  mainClass = "tech.maze.helloworld.backend.App"
}
