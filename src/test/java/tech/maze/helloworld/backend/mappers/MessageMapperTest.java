package tech.maze.helloworld.backend.mappers;

import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mapstruct.extensions.spring.test.ConverterScan;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Configuration;
import org.springframework.test.context.junit.jupiter.SpringExtension;
import tech.maze.commons.mappers.BaseDtoMapper;
import tech.maze.commons.mappers.UuidMapper;
import tech.maze.dtos.helloworld.payloads.AddRequest;
import tech.maze.helloworld.backend.models.Message;
import java.time.Instant;
import java.util.UUID;

import static org.assertj.core.api.Assertions.assertThat;

@ExtendWith(SpringExtension.class)
class MessageMapperTest {
  @Configuration
  @ConverterScan(basePackageClasses = {
    MessageMapper.class,
    BaseDtoMapper.class,
    UuidMapper.class
  })
  static class ScanConfiguration {}

  @Autowired
  MessageMapper mapper;

  @Test
  @DisplayName("Should correctly map Message entity to DTO with all fields")
  void toDto_ShouldMapEntityToDto() {
    // Arrange
    final UUID id = UUID.randomUUID();
    final String content = "Test message";
    final Instant createdAt = Instant.now();
    final Message message = Message.builder()
        .id(id)
        .content(content)
        .createdAt(createdAt)
        .build();

    // Act
    final tech.maze.dtos.helloworld.models.Message result = mapper.toDto(message);

    // Assert
    assertThat(result).isNotNull();
    assertThat(result.getId()).isEqualTo(id.toString());
    assertThat(result.getContent()).isEqualTo(content);
  }

  @Test
  @DisplayName("Should correctly map Message DTO to entity with all fields")
  void toEntity_ShouldMapDtoToEntity() {
    // Arrange
    final UUID id = UUID.randomUUID();
    final String content = "Test message";
    final tech.maze.dtos.helloworld.models.Message messageDto = tech.maze.dtos.helloworld.models.Message.newBuilder()
        .setId(id.toString())
        .setContent(content)
        .build();

    // Act
    final Message result = mapper.toEntity(messageDto);

    // Assert
    assertThat(result).isNotNull();
    assertThat(result.getId()).isEqualTo(id);
    assertThat(result.getContent()).isEqualTo(content);
  }

  @Test
  @DisplayName("Should correctly map AddRequest to Message entity with null ID")
  void toEntity_ShouldMapAddRequestToEntity() {
    // Arrange
    final String content = "Test message";
    final AddRequest addRequest = AddRequest.newBuilder()
        .setContent(content)
        .build();

    // Act
    final Message result = mapper.toEntity(addRequest);

    // Assert
    assertThat(result).isNotNull();
    assertThat(result.getContent()).isEqualTo(content);
    assertThat(result.getId()).isNull(); // ID should be null as it's generated by the database
  }
}
